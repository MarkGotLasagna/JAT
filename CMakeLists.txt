# CMakeLists.txt
#
# Configure Qt Widgets project starting from the default configuration
# generated by Visual Studio's own UI. This ensures the right 
# architectures are used, otherwise leading to mismatches with 
# versions and whatnot.

cmake_minimum_required(VERSION 3.16)
project(JAT LANGUAGES CXX)

# Force MSVC compiler for C/C++
# 
# For some stupid reason running "cmake .." defaults to Ninja build.
# For W11 and Qt6 installed, we default to these.
set(CMAKE_C_COMPILER "cl.exe")
set(CMAKE_CXX_COMPILER "cl.exe")

include(qt.cmake) # Without this everything breaks

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_PREFIX_PATH "C:/Qt/6.8.1/msvc2022_64/lib/cmake") # Prevent not finding Qt cmake files

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core)
find_package(Qt${QT_VERSION_MAJOR}
    COMPONENTS
        Core
        Gui
        Widgets
)
qt_standard_project_setup()

file(GLOB_RECURSE SRC_FILES CONFIGURE_DEPENDS src/*.cpp)        # Source files .cpp
file(GLOB_RECURSE HEADER_FILES CONFIGURE_DEPENDS src/*.h)       # Header files .h
file(GLOB_RECURSE QT_FILES CONFIGURE_DEPENDS                    # Misc Qt configuration files, add more if needed
    src/*.ui
    src/*.rc
    src/*.ico)

set(PROJECT_SOURCES
    ${SRC_FILES}
    ${HEADER_FILES}
    ${QT_FILES}
)

qt_add_executable(${PROJECT_NAME} ${PROJECT_SOURCES})

set_target_properties(${PROJECT_NAME}
    PROPERTIES
        WIN32_EXECUTABLE TRUE
)

target_include_directories(${PROJECT_NAME}
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_link_libraries(${PROJECT_NAME}
    PUBLIC
        Qt::Core
        Qt::Gui
        Qt::Widgets
)